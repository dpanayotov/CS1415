(define M
  (list (list 1 2 3)
        (list 4 5 6)
        (list 7 8 9)))

(define (range a b)
  (cond
    ((> a b) (list))
    (else (cons a (range (+ a 1) b)))))

(define (filter pred? l)
  (cond
    ((null? l) (list))
    ((pred? (car l)) (cons (car l) (filter pred? (cdr l))))
    (else (filter pred? (cdr l)))))

(define (all? pred? l)
  (= (length l) (length (filter pred? l))))

(define (same? items)
  (all? (lambda (x)
          (equal? (car items) x))
        (cdr items)))

(define (diagonal M)
  (map (lambda (i row)
         (nth i row))
       (range 0 (- (length M) 1))
       M))

(define (nth index l)
  (cond
    ((= index 0) (car l))
    (else (nth (- index 1) (cdr l)))))
 

(define (secondary M)
  (diagonal
   (map reverse M)))

; column index martix (column index M)
(define (column index M)
  (map (lambda (row)
         (nth index row))
       M))

(define (reverse-cols M)
  (reverse M))

(define (qsort items)
  (cond
    ((null? items) (list))
    (else
     ;(append
      ;(qsort (filter (lambda (x)
      ;                        (< x (car items))) (cdr items)))
      ;(list (car items))
      ;(qsort (filter (lambda (x)
      ;                        (>= x (car items))) (cdr items)))
      ;))))
     (let*
         ;start local variables
         ( (pivot (car items))
           (rest (cdr items))
           (lesser (filter (lambda (x) (< x pivot)) rest))
           (greater (filter (lambda (x) (>= x pivot)) rest))
           ;end local variables
           )
       (append (qsort lesser) (list pivot) (qsort greater))))))